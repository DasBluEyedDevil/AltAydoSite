<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/main_aydocorp.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/main_aydocorp.yml" />
              <option name="originalContent" value="# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy&#10;# More GitHub Actions for Azure: https://github.com/Azure/actions&#10;&#10;name: Build and deploy Node.js app to Azure Web App - AydoCorp&#10;&#10;on:&#10;  push:&#10;    branches:&#10;      - main&#10;  workflow_dispatch:&#10;&#10;jobs:&#10;  build:&#10;    runs-on: ubuntu-latest&#10;    permissions:&#10;      contents: read&#10;&#10;    steps:&#10;      - uses: actions/checkout@v4&#10;&#10;      - name: Set up Node.js version&#10;        uses: actions/setup-node@v4&#10;        with:&#10;          node-version: '20.x'&#10;          cache: 'npm'&#10;&#10;      - name: Create .env.local&#10;        run: |&#10;          cat &gt; .env.local &lt;&lt; 'EOF'&#10;          # MongoDB connection string (vCore)&#10;          MONGODB_URI=${{ secrets.MONGODB_URI }}&#10;&#10;          # Email Configuration&#10;          EMAIL_HOST=${{ secrets.EMAIL_HOST }}&#10;          EMAIL_PORT=${{ secrets.EMAIL_PORT }}&#10;          EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}&#10;          EMAIL_USER=${{ secrets.EMAIL_USER }}&#10;          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}&#10;&#10;          # Microsoft Entra ID Configuration&#10;          ENTRA_TENANT_ID=${{ secrets.ENTRA_TENANT_ID }}&#10;          ENTRA_CLIENT_ID=${{ secrets.ENTRA_CLIENT_ID }}&#10;          ENTRA_CLIENT_SECRET=${{ secrets.ENTRA_CLIENT_SECRET }}&#10;&#10;          # NextAuth Configuration&#10;          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}&#10;          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}&#10;          EOF&#10;&#10;      - name: Create next.config.js if it doesn't exist&#10;        run: |&#10;          if [ ! -f next.config.js ]; then&#10;            echo &quot;/** @type {import('next').NextConfig} */&#10;            const nextConfig = {&#10;              poweredByHeader: false,&#10;              typescript: {&#10;                ignoreBuildErrors: true,&#10;              },&#10;              images: {&#10;                unoptimized: true,&#10;                dangerouslyAllowSVG: true,&#10;                formats: ['image/avif', 'image/webp'],&#10;                remotePatterns: [],&#10;              }&#10;            };&#10;            &#10;            module.exports = nextConfig;&quot; &gt; next.config.js&#10;          fi&#10;          &#10;      - name: npm clean install and build&#10;        run: |&#10;          npm ci&#10;          npm run build&#10;          &#10;      - name: Prepare for deployment&#10;        run: |&#10;          # Create a deployment package with built Next.js app&#10;          # Include necessary files for Azure App Service&#10;          mkdir deploy&#10;          cp -r .next deploy/&#10;          cp -r public deploy/&#10;          cp -r src deploy/&#10;          cp package*.json deploy/&#10;          cp next.config.js deploy/&#10;          cp .env.local deploy/&#10;          &#10;          # Create web.config for Azure App Service&#10;          cat &gt; deploy/web.config &lt;&lt; 'EOF'&#10;          &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;          &lt;configuration&gt;&#10;            &lt;system.webServer&gt;&#10;              &lt;handlers&gt;&#10;                &lt;add name=&quot;iisnode&quot; path=&quot;server.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot;/&gt;&#10;              &lt;/handlers&gt;&#10;              &lt;rewrite&gt;&#10;                &lt;rules&gt;&#10;                  &lt;rule name=&quot;StaticContent&quot; stopProcessing=&quot;true&quot;&gt;&#10;                    &lt;match url=&quot;^(images|css|js|fonts|_next)(/.*)?$&quot; /&gt;&#10;                    &lt;action type=&quot;None&quot; /&gt;&#10;                  &lt;/rule&gt;&#10;                  &lt;rule name=&quot;DynamicContent&quot;&gt;&#10;                    &lt;conditions&gt;&#10;                      &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;True&quot;/&gt;&#10;                    &lt;/conditions&gt;&#10;                    &lt;action type=&quot;Rewrite&quot; url=&quot;server.js&quot;/&gt;&#10;                  &lt;/rule&gt;&#10;                &lt;/rules&gt;&#10;              &lt;/rewrite&gt;&#10;              &lt;staticContent&gt;&#10;                &lt;mimeMap fileExtension=&quot;.png&quot; mimeType=&quot;image/png&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.jpg&quot; mimeType=&quot;image/jpeg&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.jpeg&quot; mimeType=&quot;image/jpeg&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.gif&quot; mimeType=&quot;image/gif&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.svg&quot; mimeType=&quot;image/svg+xml&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.webp&quot; mimeType=&quot;image/webp&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.ico&quot; mimeType=&quot;image/x-icon&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.js&quot; mimeType=&quot;application/javascript&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.css&quot; mimeType=&quot;text/css&quot; /&gt;&#10;                &lt;mimeMap fileExtension=&quot;.json&quot; mimeType=&quot;application/json&quot; /&gt;&#10;              &lt;/staticContent&gt;&#10;              &lt;iisnode node_env=&quot;production&quot;&#10;                       nodeProcessCommandLine=&quot;&amp;quot;%programfiles%\nodejs\node.exe&amp;quot;&quot;&#10;                       watchedFiles=&quot;*.js;iisnode.yml&quot;/&gt;&#10;            &lt;/system.webServer&gt;&#10;          &lt;/configuration&gt;&#10;          EOF&#10;          &#10;          # Create server.js for Azure App Service&#10;          cat &gt; deploy/server.js &lt;&lt; 'EOF'&#10;          const { createServer } = require('http');&#10;          const { parse } = require('url');&#10;          const next = require('next');&#10;          &#10;          const dev = false;&#10;          const app = next({ dev });&#10;          const handle = app.getRequestHandler();&#10;          &#10;          const PORT = process.env.PORT || 3000;&#10;          &#10;          app.prepare().then(() =&gt; {&#10;            createServer((req, res) =&gt; {&#10;              const parsedUrl = parse(req.url, true);&#10;              handle(req, res, parsedUrl);&#10;            }).listen(PORT, (err) =&gt; {&#10;              if (err) throw err;&#10;              console.log(`&gt; Ready on http://localhost:${PORT}`);&#10;            });&#10;          });&#10;          EOF&#10;          &#10;          cd deploy&#10;          zip -r ../release.zip .&#10;&#10;      - name: Upload artifact for deployment job&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: node-app&#10;          path: release.zip&#10;&#10;  deploy:&#10;    runs-on: ubuntu-latest&#10;    needs: build&#10;    environment:&#10;      name: 'Production'&#10;      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}&#10;    &#10;    steps:&#10;      - name: Download artifact from build job&#10;        uses: actions/download-artifact@v4&#10;        with:&#10;          name: node-app&#10;&#10;      - name: Unzip artifact for deployment&#10;        run: unzip release.zip&#10;      &#10;      - name: 'Deploy to Azure Web App'&#10;        id: deploy-to-webapp&#10;        uses: azure/webapps-deploy@v3&#10;        with:&#10;          app-name: 'AydoCorp'&#10;          slot-name: 'Production'&#10;          package: .&#10;          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E8F83D01518942F1B2B01381F804622F }}" />
              <option name="updatedContent" value="# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy&#13;&#10;# More GitHub Actions for Azure: https://github.com/Azure/actions&#13;&#10;&#13;&#10;name: Build and deploy Node.js app to Azure Web App - AydoCorp&#13;&#10;&#13;&#10;on:&#13;&#10;  push:&#13;&#10;    branches:&#13;&#10;      - main&#13;&#10;  workflow_dispatch:&#13;&#10;&#13;&#10;jobs:&#13;&#10;  build:&#13;&#10;    runs-on: ubuntu-latest&#13;&#10;    permissions:&#13;&#10;      contents: read&#13;&#10;&#13;&#10;    steps:&#13;&#10;      - uses: actions/checkout@v4&#13;&#10;&#13;&#10;      - name: Set up Node.js version&#13;&#10;        uses: actions/setup-node@v4&#13;&#10;        with:&#13;&#10;          node-version: '20.x'&#13;&#10;          cache: 'npm'&#13;&#10;&#13;&#10;      - name: Create .env.local&#13;&#10;        run: |&#13;&#10;          cat &gt; .env.local &lt;&lt; 'EOF'&#13;&#10;          # MongoDB connection string (vCore)&#13;&#10;          MONGODB_URI=${{ secrets.MONGODB_URI }}&#13;&#10;&#13;&#10;          # Email Configuration&#13;&#10;          EMAIL_HOST=${{ secrets.EMAIL_HOST }}&#13;&#10;          EMAIL_PORT=${{ secrets.EMAIL_PORT }}&#13;&#10;          EMAIL_SECURE=${{ secrets.EMAIL_SECURE }}&#13;&#10;          EMAIL_USER=${{ secrets.EMAIL_USER }}&#13;&#10;          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}&#13;&#10;&#13;&#10;          # Microsoft Entra ID Configuration&#13;&#10;          ENTRA_TENANT_ID=${{ secrets.ENTRA_TENANT_ID }}&#13;&#10;          ENTRA_CLIENT_ID=${{ secrets.ENTRA_CLIENT_ID }}&#13;&#10;          ENTRA_CLIENT_SECRET=${{ secrets.ENTRA_CLIENT_SECRET }}&#13;&#10;&#13;&#10;          # NextAuth Configuration&#13;&#10;          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}&#13;&#10;          NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}&#13;&#10;          EOF&#13;&#10;&#13;&#10;      - name: Ensure next.config.js exists&#13;&#10;        run: |&#13;&#10;          if [ ! -f next.config.js ]; then&#13;&#10;            echo &quot;/** @type {import('next').NextConfig} */&#13;&#10;            const nextConfig = {&#13;&#10;              poweredByHeader: false,&#13;&#10;              typescript: { ignoreBuildErrors: true },&#13;&#10;              images: { unoptimized: true, dangerouslyAllowSVG: true, formats: ['image/avif', 'image/webp'], remotePatterns: [] }&#13;&#10;            };&#13;&#10;            module.exports = nextConfig;&quot; &gt; next.config.js&#13;&#10;          fi&#13;&#10;&#13;&#10;      - name: Install deps and build&#13;&#10;        run: |&#13;&#10;          npm ci&#13;&#10;          npm run build&#13;&#10;&#13;&#10;      - name: Prepare deployment artifact (prefer standalone)&#13;&#10;        run: |&#13;&#10;          set -e&#13;&#10;          mkdir -p deploy&#13;&#10;          if [ -d .next/standalone ]; then&#13;&#10;            echo &quot;Using Next.js standalone output&quot;&#13;&#10;            # Copy standalone server (contains its own node_modules)&#13;&#10;            cp -R .next/standalone/* deploy/&#13;&#10;            # Ensure static assets and public are present&#13;&#10;            mkdir -p deploy/.next&#13;&#10;            cp -R .next/static deploy/.next/static&#13;&#10;            if [ -d public ]; then cp -R public deploy/public; fi&#13;&#10;            # package.json is optional but harmless&#13;&#10;            cp package.json deploy/package.json&#13;&#10;          else&#13;&#10;            echo &quot;Standalone output not found; falling back to full app (node_modules + npm start)&quot;&#13;&#10;            cp -R .next deploy/.next&#13;&#10;            if [ -d public ]; then cp -R public deploy/public; fi&#13;&#10;            cp package.json deploy/package.json&#13;&#10;            cp package-lock.json deploy/package-lock.json || true&#13;&#10;            # Include node_modules so Azure can run npm start without building&#13;&#10;            cp -R node_modules deploy/node_modules&#13;&#10;          fi&#13;&#10;          # Avoid shipping unnecessary large folders&#13;&#10;          find deploy -name &quot;archive&quot; -type d -prune -exec rm -rf {} + || true&#13;&#10;          find deploy -name &quot;Build Logs&quot; -type d -prune -exec rm -rf {} + || true&#13;&#10;          # Create zip&#13;&#10;          (cd deploy &amp;&amp; zip -qr ../release.zip .)&#13;&#10;&#13;&#10;      - name: Upload artifact for deployment job&#13;&#10;        uses: actions/upload-artifact@v4&#13;&#10;        with:&#13;&#10;          name: node-app&#13;&#10;          path: release.zip&#13;&#10;&#13;&#10;  deploy:&#13;&#10;    runs-on: ubuntu-latest&#13;&#10;    needs: build&#13;&#10;    environment:&#13;&#10;      name: 'Production'&#13;&#10;      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}&#13;&#10;&#13;&#10;    steps:&#13;&#10;      - name: Download artifact from build job&#13;&#10;        uses: actions/download-artifact@v4&#13;&#10;        with:&#13;&#10;          name: node-app&#13;&#10;&#13;&#10;      - name: Unzip artifact for deployment&#13;&#10;        run: unzip -q release.zip&#13;&#10;&#13;&#10;      - name: Deploy to Azure Web App&#13;&#10;        id: deploy-to-webapp&#13;&#10;        uses: azure/webapps-deploy@v3&#13;&#10;        with:&#13;&#10;          app-name: 'AydoCorp'&#13;&#10;          slot-name: 'Production'&#13;&#10;          package: .&#13;&#10;          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E8F83D01518942F1B2B01381F804622F }}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>