version: 1
backend:
  phases:
    # preBuild, build, postBuild phases for the backend
    # Amplify automatically handles deploying changes in the 'amplify' folder (like your resource.ts)
    # during these backend phases if it detects any.
    # You usually don't need to add explicit 'npx ampx deploy' commands here.
    preBuild:
      commands:
        - npm ci
        - npm install -g @aws-amplify/cli
    build:
      commands:
        - echo "Building Amplify backend..."
        - npx ampx pipeline-deploy --app-id "${AWS_APP_ID}" --branch "${AWS_BRANCH}" || echo "Skipping ampx pipeline-deploy due to issues"
        - npm run build:amplify || echo "No build:amplify script found, using default Amplify handling"
        - npx ampx info || echo "Amplify not initialized, skipping status check"
frontend:
  phases:
    preBuild:
      commands:
        - echo "Installing frontend dependencies..."
        - npm ci
        - node -e "const fs=require('fs'); try { if (!fs.existsSync('./amplify_outputs.json')) { fs.writeFileSync('./amplify_outputs.json', JSON.stringify({}, null, 2)); console.log('Created empty amplify_outputs.json'); }} catch(e) { console.error(e); }"
    build:
      commands:
        - echo "Setting up environment for NextAuth and Amplify..."
        - |
          node -e "
            const fs = require('fs');
            try {
              if (!fs.existsSync('.env.local') && process.env.NEXTAUTH_SECRET) {
                let envContent = '';
                envContent += 'NEXTAUTH_SECRET=' + process.env.NEXTAUTH_SECRET + '\n';
                envContent += 'NEXTAUTH_URL=' + (process.env.NEXTAUTH_URL || process.env.DEPLOY_URL || '') + '\n';
                envContent += 'NEXT_PUBLIC_GRAPHQL_ENDPOINT=' + (process.env.NEXT_PUBLIC_GRAPHQL_ENDPOINT || '') + '\n';
                envContent += 'NEXT_PUBLIC_GRAPHQL_API_KEY=' + (process.env.NEXT_PUBLIC_GRAPHQL_API_KEY || '') + '\n';
                envContent += 'NEXT_PUBLIC_AWS_REGION=' + (process.env.NEXT_PUBLIC_AWS_REGION || 'us-east-1') + '\n';
                fs.writeFileSync('.env.local', envContent);
                console.log('Created .env.local');
              } else {
                console.log('.env.local already exists or NEXTAUTH_SECRET not available');
              }
            } catch(e) {
              console.error('Error creating .env.local:', e);
            }
          "
        - echo "Building Next.js application..."
        - npm run build
        - echo "Creating amplify_outputs.json if needed..."
        - |
          node -e "
            const fs = require('fs');
            try {
              const amplifyDir = './amplify';
              if (fs.existsSync(amplifyDir)) {
                if (fs.existsSync('./amplify/backend.out.json')) {
                  const amplifyExports = require('./amplify/backend.out.json');
                  fs.writeFileSync('./public/amplify_outputs.json', JSON.stringify(amplifyExports, null, 2));
                  console.log('Created amplify_outputs.json from backend.out.json');
                } else if (fs.existsSync('./amplify/output.json')) {
                  const amplifyExports = require('./amplify/output.json');
                  fs.writeFileSync('./public/amplify_outputs.json', JSON.stringify(amplifyExports, null, 2));
                  console.log('Created amplify_outputs.json from output.json');
                } else {
                  console.log('amplify output files do not exist');
                }
              } else {
                console.log('amplify directory does not exist');
              }
            } catch(e) {
              console.log('Error checking Amplify exports:', e.message);
            }
          "
        - npx ampx generate outputs --app-id "$AWS_APP_ID" --branch "$AWS_BRANCH" || echo "Skipping amplify generate outputs due to permission issues"
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
      - '../public/**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*
  customHeaders:
    - pattern: '**/*'
      headers:
        - key: 'Strict-Transport-Security'
          value: 'max-age=31536000; includeSubDomains'
        - key: 'X-Content-Type-Options'
          value: 'nosniff'
        - key: 'X-XSS-Protection'
          value: '1; mode=block'
  environment:
    variables:
      NODE_ENV: 'production'