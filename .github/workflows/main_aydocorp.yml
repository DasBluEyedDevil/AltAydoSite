# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - AydoCorp

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'      - name: Create next.config.js if it doesn't exist
        run: |
          if [ ! -f next.config.js ]; then
            echo "/** @type {import('next').NextConfig} */
            const nextConfig = {
              poweredByHeader: false,
              typescript: {
                ignoreBuildErrors: true,
              },
              images: {
                unoptimized: true,
                dangerouslyAllowSVG: true,
                formats: ['image/avif', 'image/webp'],
                remotePatterns: [],
              }
            };
            
            module.exports = nextConfig;" > next.config.js
          fi
          
      - name: npm clean install and build
        run: |
          npm ci
          npm run build
          
      - name: Prepare for deployment
        run: |
          # Create a deployment package with built Next.js app
          # Include necessary files for Azure App Service
          mkdir deploy
          cp -r .next deploy/
          cp -r public deploy/
          cp -r src deploy/
          cp package*.json deploy/
          cp next.config.js deploy/
          
          # Create web.config for Azure App Service
          cat > deploy/web.config << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent" stopProcessing="true">
                    <match url="^(images|css|js|fonts|_next)(/.*)?$" />
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <staticContent>
                <mimeMap fileExtension=".png" mimeType="image/png" />
                <mimeMap fileExtension=".jpg" mimeType="image/jpeg" />
                <mimeMap fileExtension=".jpeg" mimeType="image/jpeg" />
                <mimeMap fileExtension=".gif" mimeType="image/gif" />
                <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
                <mimeMap fileExtension=".webp" mimeType="image/webp" />
                <mimeMap fileExtension=".ico" mimeType="image/x-icon" />
                <mimeMap fileExtension=".js" mimeType="application/javascript" />
                <mimeMap fileExtension=".css" mimeType="text/css" />
                <mimeMap fileExtension=".json" mimeType="application/json" />
              </staticContent>
              <iisnode node_env="production"
                       nodeProcessCommandLine="&quot;%programfiles%\nodejs\node.exe&quot;"
                       watchedFiles="*.js;iisnode.yml"/>
            </system.webServer>
          </configuration>
          EOF
          
          # Create server.js for Azure App Service
          cat > deploy/server.js << 'EOF'
          const { createServer } = require('http');
          const { parse } = require('url');
          const next = require('next');
          
          const dev = false;
          const app = next({ dev });
          const handle = app.getRequestHandler();
          
          const PORT = process.env.PORT || 3000;
          
          app.prepare().then(() => {
            createServer((req, res) => {
              const parsedUrl = parse(req.url, true);
              handle(req, res, parsedUrl);
            }).listen(PORT, (err) => {
              if (err) throw err;
              console.log(`> Ready on http://localhost:${PORT}`);
            });
          });
          EOF
          
          cd deploy
          zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'AydoCorp'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E8F83D01518942F1B2B01381F804622F }}